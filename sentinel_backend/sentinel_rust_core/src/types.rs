//! Type definitions for the Sentinel Rust Core
//! 
//! This module defines the core data structures used throughout the agent system,
//! including task definitions, results, and API request/response types.

use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Represents a task that can be executed by an agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentTask {
    pub task_id: String,
    pub spec_id: String,  // Changed from i32 to String to match Python side
    pub agent_type: String,
    pub parameters: HashMap<String, serde_json::Value>,
    pub target_environment: Option<String>,
}

/// Represents the result of an agent's execution
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentResult {
    pub task_id: String,
    pub agent_type: String,
    pub status: String, // "success", "failed", "partial"
    pub test_cases: Vec<TestCase>,
    pub metadata: HashMap<String, serde_json::Value>,
    pub error_message: Option<String>,
}

/// Represents a test case generated by an agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TestCase {
    pub test_name: String,
    pub test_type: String,
    pub method: String,
    pub path: String,
    pub headers: HashMap<String, String>,
    pub query_params: HashMap<String, serde_json::Value>,
    pub body: Option<serde_json::Value>,
    pub timeout: u32,
    pub expected_status_codes: Vec<u16>,
    pub assertions: Vec<Assertion>,
    pub tags: Vec<String>,
}

/// Represents an assertion to validate test results
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Assertion {
    pub assertion_type: String,
    pub expected: serde_json::Value,
    pub path: Option<String>, // JSON path for response validation
}

/// Request structure for orchestrating agents
#[derive(Debug, Deserialize)]
pub struct OrchestrationRequest {
    pub task: AgentTask,
    pub api_spec: serde_json::Value,
}

/// Response structure for orchestration results
#[derive(Debug, Serialize)]
pub struct OrchestrationResponse {
    pub result: AgentResult,
    pub processing_time_ms: u64,
}

/// Endpoint information extracted from API specification
#[derive(Debug, Clone)]
pub struct EndpointInfo {
    pub path: String,
    pub method: String,
    pub operation: serde_json::Value,
    pub summary: String,
    pub description: String,
    pub parameters: Vec<serde_json::Value>,
    pub request_body: Option<serde_json::Value>,
    pub responses: HashMap<String, serde_json::Value>,
}

/// Configuration for data generation
#[derive(Debug, Clone)]
pub struct DataGenConfig {
    pub strategy: String,
    pub count: usize,
    pub seed: Option<u64>,
    pub realistic_bias: f64,
}

impl Default for DataGenConfig {
    fn default() -> Self {
        Self {
            strategy: "realistic".to_string(),
            count: 10,
            seed: None,
            realistic_bias: 0.8,
        }
    }
}