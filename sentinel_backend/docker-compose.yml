version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: sentinel_db
    env_file:
      - .env.docker
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - sentinel_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinel -d sentinel_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    container_name: sentinel_api_gateway
    env_file:
      - .env.docker
    ports:
      - "${API_GATEWAY_PORT}:8000"
    depends_on:
      - auth_service
      - spec_service
      - orchestration_service
      - data_service
      - sentinel_rust_core
    environment:
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - SPEC_SERVICE_URL=${SPEC_SERVICE_URL}
      - ORCHESTRATION_SERVICE_URL=${ORCHESTRATION_SERVICE_URL}
      - DATA_SERVICE_URL=${DATA_SERVICE_URL}
      - EXECUTION_SERVICE_URL=${EXECUTION_SERVICE_URL}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  auth_service:
    build:
      context: .
      dockerfile: auth_service/Dockerfile
    container_name: sentinel_auth_service
    env_file:
      - .env.docker
    ports:
      - "${AUTH_SERVICE_PORT}:8000"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  spec_service:
    build:
      context: .
      dockerfile: spec_service/Dockerfile
    container_name: sentinel_spec_service
    env_file:
      - .env.docker
    ports:
      - "${SPEC_SERVICE_PORT}:8001"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  orchestration_service:
    build:
      context: .
      dockerfile: orchestration_service/Dockerfile
    container_name: sentinel_orchestration_service
    env_file:
      - .env.docker
    ports:
      - "${ORCHESTRATION_SERVICE_PORT}:8002"
    depends_on:
      - execution_service
      - data_service
      - sentinel_rust_core
    environment:
      - EXECUTION_SERVICE_URL=${EXECUTION_SERVICE_URL}
      - DATA_SERVICE_URL=${DATA_SERVICE_URL}
      - SPEC_SERVICE_URL=${SPEC_SERVICE_URL}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  execution_service:
    build:
      context: .
      dockerfile: execution_service/Dockerfile
    container_name: sentinel_execution_service
    env_file:
      - .env.docker
    ports:
      - "${EXECUTION_SERVICE_PORT}:8003"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATA_SERVICE_URL=${DATA_SERVICE_URL}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  data_service:
    build:
      context: .
      dockerfile: data_service/Dockerfile
    container_name: sentinel_data_service
    env_file:
      - .env.docker
    ports:
      - "${DATA_SERVICE_PORT}:8004"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SENTINEL_ENVIRONMENT=${SENTINEL_ENVIRONMENT}

  sentinel_rust_core:
    build:
      context: .
      dockerfile: sentinel_rust_core/Dockerfile
    container_name: sentinel_rust_core
    ports:
      - "8088:8088"
    environment:
      - RUST_LOG=info
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  sentinel_postgres_data:
